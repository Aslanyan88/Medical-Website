// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  firstName     String?
  lastName      String?
  isAdmin       Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  emailVerified DateTime?
  password      String?
  appointments  Appointment[]

  @@map("user")
}

model Doctor {
  id            String        @id @default(cuid())
  name          String
  nameHy        String?
  email         String        @unique
  specialty     String
  specialtyHy   String?
  department    String
  departmentHy  String?
  bio           String?       @db.Text
  bioHy         String?       @db.Text
  image         String?       @db.Text
  experience    Int?
  languages     String?       @db.Text
  languagesHy   String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  timeSlots     TimeSlot[]
  appointments  Appointment[]

  @@map("doctor")
}

model TimeSlot {
  id          String      @id @default(cuid())
  day         String
  startTime   String
  endTime     String
  isAvailable Boolean     @default(true)
  doctorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  doctor      Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointment Appointment?

  @@map("timeslot")
}

model Appointment {
  id         String     @id @default(cuid())
  date       DateTime
  time       String
  reason     String?    @db.Text
  notes      String?    @db.Text
  status     AppointmentStatus @default(SCHEDULED)
  patientId  String
  doctorId   String
  timeSlotId String?    @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  patient    User       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor     Doctor     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  timeSlot   TimeSlot?  @relation(fields: [timeSlotId], references: [id], onDelete: SetNull)

  @@index([patientId])
  @@index([doctorId])
  @@map("appointment")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
}